# Generated by Django 5.2.5 on 2025-08-16 11:40

import ckeditor_uploader.fields
import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CartProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
            ],
            options={
                'verbose_name': '장바구니 상품',
                'verbose_name_plural': '장바구니 상품',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(allow_unicode=True, max_length=200, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ColorCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(allow_unicode=True, max_length=200, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Colorcategories',
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='NestedSubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(allow_unicode=True, max_length=200, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('total_amount', models.PositiveIntegerField(verbose_name='결제금액')),
                ('status', models.CharField(choices=[('requested', '주문요청'), ('failed_payment', '결제실패'), ('paid', '결제완료'), ('prepared_product', '상품준비중'), ('shipped', '배송중'), ('delivered', '배송완료'), ('cancelled', '주문취소'), ('confirmed', '구매확정')], db_index=True, default='requested', max_length=20, verbose_name='진행상태')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '주문',
                'verbose_name_plural': '주문',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='OrderedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='주문 시점의 상품명을 저장합니다.', max_length=100, verbose_name='상품명')),
                ('price', models.PositiveIntegerField(help_text='주문 시점의 상품가격을 저장합니다.', verbose_name='상품가격')),
                ('quantity', models.PositiveIntegerField(verbose_name='수량')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='OrderPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta', models.JSONField(default=dict, editable=False, verbose_name='포트원 결제내역')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='쇼핑몰 결제식별자')),
                ('name', models.CharField(max_length=200, verbose_name='결제명')),
                ('desired_amount', models.PositiveIntegerField(editable=False, verbose_name='결제금액')),
                ('buyer_name', models.CharField(editable=False, max_length=100, verbose_name='구매자 이름')),
                ('buyer_email', models.EmailField(editable=False, max_length=254, verbose_name='구매자 이메일')),
                ('pay_method', models.CharField(choices=[('card', '신용카드')], default='card', max_length=20, verbose_name='결제수단')),
                ('pay_status', models.CharField(choices=[('ready', '결제 준비'), ('paid', '결제 완료'), ('cancelled', '결제 취소'), ('failed', '결제 실패')], default='ready', max_length=20, verbose_name='결제상태')),
                ('is_paid_ok', models.BooleanField(db_index=True, default=False, editable=False, verbose_name='결제성공 여부')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('updated', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('price', models.IntegerField()),
                ('status', models.CharField(choices=[('a', '정상'), ('s', '품절'), ('o', '단종'), ('i', '비활성화')], default='i', max_length=1)),
                ('head_image', models.ImageField(blank=True, upload_to='shop/images/%Y/%m/%d/')),
                ('image', models.ImageField(upload_to='shop/images')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True)),
                ('stock', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '상품',
                'verbose_name_plural': '상품',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='ProductDetailImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='shop/detail_images/')),
                ('order', models.PositiveIntegerField(default=0, help_text='이미지 순서 (낮은 숫자가 먼저 표시)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '상품 상세 이미지',
                'verbose_name_plural': '상품 상세 이미지들',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='SizeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(allow_unicode=True, max_length=200, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Sizecategories',
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
    ]
